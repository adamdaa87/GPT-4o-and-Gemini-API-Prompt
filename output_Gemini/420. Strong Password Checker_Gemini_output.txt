class Solution:
    def strongPasswordChecker(self, password: str) -> int:
        n = len(password)
        has_lower = has_upper = has_digit = False
        for c in password:
            if c.islower():
                has_lower = True
            elif c.isupper():
                has_upper = True
            elif c.isdigit():
                has_digit = True

        missing_types = (not has_lower) + (not has_upper) + (not has_digit)

        # Case 1: Insertion can be done (length < 6)
        if n < 6:
            return max(6 - n, missing_types)

        # Case 2: Deletion can be done (length <= 20)
        if n <= 20:
            replace = 0
            i = 2
            while i < n:
                if password[i] == password[i - 1] == password[i - 2]:
                    replace += 1
                    i += 2  # Skip ahead to avoid counting overlapping repeats
                else:
                    i += 1
            return max(replace, missing_types)

        # Case 3: Only replacement can be done (length > 20)
        # Calculate the number of characters to delete
        delete_count = n - 20

        # Calculate the number of replacements needed for repeating characters
        replace = 0
        i = 2
        while i < n:
            if password[i] == password[i - 1] == password[i - 2]:
                # If we can delete a character from this repeat to reduce replacements, do it
                if delete_count > 0:
                    delete_count -= 1
                    i += 2
                else:
                    replace += 1
                    i += 2
            else:
                i += 1

        # The final result is the maximum of these three:
        # 1. Characters to delete
        # 2. Replacements needed for repeating characters
        # 3. Missing character types
        return delete_count + max(replace, missing_types)