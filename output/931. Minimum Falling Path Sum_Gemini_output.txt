class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        n = len(matrix)
        
        # Handle the case where the matrix has only one row
        if n == 1:
            return min(matrix[0])

        # Create a DP table to store the minimum falling path sum at each position
        dp = [[float('inf')] * (n + 2) for _ in range(n)]

        # Initialize the first row of the DP table with padding
        dp[0][1:n+1] = matrix[0]

        # Iterate over each row from the second row onwards
        for i in range(1, n):
            # Iterate over each column within the row
            for j in range(1, n + 1):
                # Calculate the minimum falling path sum at the current position (i, j)
                dp[i][j] = matrix[i][j - 1] + min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1])

        # The minimum falling path sum will be the minimum value in the last row of the DP table
        return min(dp[n - 1])