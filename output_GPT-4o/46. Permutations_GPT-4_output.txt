from typing import List

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        def backtrack(start=0):
            # If we have reached the end of the array, add a permutation
            if start == len(nums):
                permutations.append(nums[:])
                return
            
            for i in range(start, len(nums)):
                # Swap the current element with the start
                nums[start], nums[i] = nums[i], nums[start]
                
                # Recurse on the next element
                backtrack(start + 1)
                
                # Backtrack to previous state
                nums[start], nums[i] = nums[i], nums[start]

        permutations = []
        backtrack()
        return permutations