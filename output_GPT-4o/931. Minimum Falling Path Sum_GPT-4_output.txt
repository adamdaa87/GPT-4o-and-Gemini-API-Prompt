from typing import List

class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        n = len(matrix)

        # Start from the second-last row and move upwards to accumulate the path sums
        for row in range(n - 2, -1, -1):
            for col in range(n):
                # Current cell's value
                current = matrix[row][col]

                # Find the minimum sum from the row below
                # We can come from directly below (row + 1, col)
                # Or from down-left (row + 1, col - 1) if col - 1 >= 0
                # Or from down-right (row + 1, col + 1) if col + 1 < n
                min_below = matrix[row + 1][col]
                if col > 0:
                    min_below = min(min_below, matrix[row + 1][col - 1])
                if col < n - 1:
                    min_below = min(min_below, matrix[row + 1][col + 1])

                # Update the current cell's value in-place with the min path sum to this point
                matrix[row][col] = current + min_below

        # The top row now contains the minimum path sums to each point
        # The answer will be the minimum of these values
        return min(matrix[0])